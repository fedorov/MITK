/**

\page InteractionHowTo Interaction Related Examples in MITK

\tableofcontents

\section EnableDisableInteraction How to disable/re-enable/modify Display Interaction using Microservices

Display Interaction is implemented as EventObservers that are registered as Microservices. This allows them to be queried and modified from
anywhere in the code. Application scenarios are e.g. wanting to disable certain interaction during a task, to avoid any conflicting actions,
or to adapt the behavior to a special tool that is selected.
One example in the MITK Workbench are the measurement tools. They are designed to operate on a single slice, such that we do not want the user
to move the cross-hair once he started a measurement. Once he finished the measurement the usual interaction should be restored.
The following code demonstrates how this is done.

To change the mitk::DisplayActionEventBroadcast behavior, we first need to set up MicroService capabilities in the module by adding:

\code
#include <usModuleInitialization.h>
US_INITIALIZE_MODULE
\endcode

Furthermore, following includes are needed for the code snipped to work:

\code
// Header
#include "usServiceRegistration.h"
#include <mitkEventConfig.h>

// Source
#include "mitkInteractionEventObserver.h"
#include "mitkDisplayActionEventBroadcast.h"

#include "usGetModuleContext.h"
#include "usModuleContext.h"
\endcode

The first code snippet queries the us for the DisplayActionEventBroadcast and then exchanges its configuration for a minimal version,
that does not allow cross-hair actions.
The original configuration is stored in a member that allows restoration of the original behavior once we're done with our action.

\code
  m_DisplayInteractorConfigs.clear();
  auto eventObservers = us::GetModuleContext()->GetServiceReferences<mitk::InteractionEventObserver>();
  for (const auto& eventObserver : eventObservers)
  {
    auto displayActionEventBroadcast = dynamic_cast<mitk::DisplayActionEventBroadcast*>(
      us::GetModuleContext()->GetService<mitk::InteractionEventObserver>(eventObserver));

    if (nullptr != displayActionEventBroadcast)
    {
      // remember the original configuration
      m_DisplayInteractorConfigs.insert(std::make_pair(eventObserver, displayActionEventBroadcast->GetEventConfig()));
      // here the alternative configuration is loaded
      displayActionEventBroadcast->AddEventConfig("DisplayConfigBlockLMB.xml");
    }
  }
\endcode

To restore the old configuration, query the DisplayActionEventBroadcast again and then restore the saved configuration:

\code
  for (const auto& displayInteractorConfig : m_DisplayInteractorConfigs)
  {
    if (displayInteractorConfig.first)
    {
      auto displayActionEventBroadcast = static_cast<mitk::DisplayActionEventBroadcast *>(
        us::GetModuleContext()->GetService<mitk::InteractionEventObserver>(displayInteractorConfig.first));

      if (nullptr != displayActionEventBroadcast)
      {
        // here the regular configuration is loaded again
        displayActionEventBroadcast->SetEventConfig(displayInteractorConfig.second);
      }
    }
  }

  m_DisplayInteractorConfigs.clear();
\endcode

Member declaration:
\code
  // holds configuration objects that have been deactivated
  std::map<us::ServiceReferenceU, mitk::EventConfig> m_DisplayInteractorConfigs;
\endcode

*/
